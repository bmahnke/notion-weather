---
import Layout from '../layouts/Layout.astro';


---

<Layout title="Welcome to Astro.">
	<main>
		<form id="weather-form" class="flex justify-between w-full" >
			<div id="form-wrapper" class="grid grid-cols-2 gap-4">
				<div>
					<label for="search" class="block text-sm font-medium leading-6 text-gray-900">Search</label>
					<div class="mt-2">
						<input type="search" name="search" id="search" class="block w-full outline-none rounded-md border-0 px-2 py-1.5 text-gray-900 shadow-sm  placeholder:text-gray-400 focus:ring-orange-500 text-sm" placeholder="Augusta, GA">
					</div>
				</div>

				<div>
					<button type="submit" form="weather-form" class="p-2 rounded-md bg-slate-500 text-gray-100">Click</button>
				</div>
			</div>

			<div>
				<output id="output"></output>
				<pre id="pre"></pre>
				<!-- TODO: units changer. -->
			</div>
		</form>
	</main>
</Layout>

<script>
	const requests = Object.assign({})

	async function onFormSubmit(event: SubmitEvent) {
		event.preventDefault();

		const targetForm = event.target as HTMLFormElement;
		const formData = new FormData(targetForm)

		const output = document.getElementById("output") as HTMLOutputElement;
		output.textContent = "";

		for (const [key, value] of formData) {
			output.textContent += `${key}: ${value}\n`;
		}


		let location = formData.get('search')

		// let location = "test";
		// console.log(event.target);
		// console.log(typeof(event.target));


		// const recentQuery = requests[location]
		// if (recentQuery) {
		// 	location = requests[location] as string
		// }

		const places = await fetch("http://127.0.0.1:8000/api/places/autocomplete/?place_query=" + location, {
			method: "GET"
		}).then((response) => response.json())


		const place_id = places.detail[0].place_id
		const content = await fetch("http://127.0.0.1:8000/api/weather/realtime?place_id=" + place_id, {
			method: "GET",
			headers: {
				"Content-Type": "application/json"
			}
		}).then((response) => response.json());

		const pre = document.getElementById("pre") as HTMLPreElement;
		pre.textContent = JSON.stringify(content.response.data.values, undefined, 2)

		return false;
	}

	const form = document.getElementById("weather-form")
	form?.addEventListener('submit', onFormSubmit);

	function updateUI(response: any) {
		if (response.cached) {
			document.getElementById('weather-cached-usage-indicator')?.classList.toggle("hidden", !response.cached);
		}

		let preEle = document.getElementById('weather-realtime-data');
		
		if (preEle) {
			preEle.innerText = JSON.stringify(response?.response?.data?.values, undefined, 2);
		}	
	}

	async function apiCall(location: string) {
		const recentQuery = requests[location]
		if (recentQuery) {
			location = requests[location]
		}

		const content = await fetch("http://127.0.0.1:8000/api/weather/realtime?location=" + location, {
			method: "GET",
			headers: {
				"Content-Type": "application/json"
			}
		}).then((response) => response.json())

		console.debug("response: ", content);

		if (!recentQuery) {

		}
		
		return content;
	}

	function realTime() {
		const input = document.getElementById("city-input") as HTMLInputElement
		const response = apiCall(input?.value || "evans")
		updateUI(response);
	}

	function getLocation() {
		var geoOptions = {
			timeout: 10 * 1000,
		};

		var geoSuccess = function (position: GeolocationPosition) {
			console.log("Position: ", position)

			const lat = position.coords.latitude
			const long = position.coords.longitude
			let location = `${lat}, ${long}`

			const repsponse = apiCall(location)

			updateUI(repsponse)
		};
		var geoError = function (error: any) {
			console.log('Error occurred. Error code: ' + error.code);
			// error.code can be:
			//   0: unknown error
			//   1: permission denied
			//   2: position unavailable (error response from location provider)
			//   3: timed out
		};

		navigator.geolocation.getCurrentPosition(geoSuccess, geoError, geoOptions);		
	}	

	const weatherApiBtn = document.getElementById('weather-api-realtime')
	weatherApiBtn?.addEventListener('click', realTime)

	const locRealtimeBtn = document.getElementById('weather-api-loc-realtime')
	locRealtimeBtn?.addEventListener('click', getLocation)	
</script>
